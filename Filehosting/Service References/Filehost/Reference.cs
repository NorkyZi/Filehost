//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан программой.
//     Исполняемая версия:4.0.30319.42000
//
//     Изменения в этом файле могут привести к неправильной работе и будут потеряны в случае
//     повторной генерации кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Filehosting.Filehost {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="DTO", Namespace="http://schemas.datacontract.org/2004/07/WcfFilehosting")]
    [System.SerializableAttribute()]
    public partial class DTO : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private byte[] DataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private long SizeField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public byte[] Data {
            get {
                return this.DataField;
            }
            set {
                if ((object.ReferenceEquals(this.DataField, value) != true)) {
                    this.DataField = value;
                    this.RaisePropertyChanged("Data");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long Size {
            get {
                return this.SizeField;
            }
            set {
                if ((this.SizeField.Equals(value) != true)) {
                    this.SizeField = value;
                    this.RaisePropertyChanged("Size");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="Filehost.IFilehost")]
    public interface IFilehost {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFilehost/sendFile", ReplyAction="http://tempuri.org/IFilehost/sendFileResponse")]
        void sendFile(Filehosting.Filehost.DTO file);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFilehost/sendFile", ReplyAction="http://tempuri.org/IFilehost/sendFileResponse")]
        System.Threading.Tasks.Task sendFileAsync(Filehosting.Filehost.DTO file);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFilehost/getFile", ReplyAction="http://tempuri.org/IFilehost/getFileResponse")]
        Filehosting.Filehost.DTO getFile(string ind, long curByte);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFilehost/getFile", ReplyAction="http://tempuri.org/IFilehost/getFileResponse")]
        System.Threading.Tasks.Task<Filehosting.Filehost.DTO> getFileAsync(string ind, long curByte);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFilehost/getFileInd", ReplyAction="http://tempuri.org/IFilehost/getFileIndResponse")]
        string getFileInd(string fileName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFilehost/getFileInd", ReplyAction="http://tempuri.org/IFilehost/getFileIndResponse")]
        System.Threading.Tasks.Task<string> getFileIndAsync(string fileName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFilehost/getFileInfo", ReplyAction="http://tempuri.org/IFilehost/getFileInfoResponse")]
        long getFileInfo(string fileName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFilehost/getFileInfo", ReplyAction="http://tempuri.org/IFilehost/getFileInfoResponse")]
        System.Threading.Tasks.Task<long> getFileInfoAsync(string fileName);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IFilehostChannel : Filehosting.Filehost.IFilehost, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class FilehostClient : System.ServiceModel.ClientBase<Filehosting.Filehost.IFilehost>, Filehosting.Filehost.IFilehost {
        
        public FilehostClient() {
        }
        
        public FilehostClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public FilehostClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public FilehostClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public FilehostClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public void sendFile(Filehosting.Filehost.DTO file) {
            base.Channel.sendFile(file);
        }
        
        public System.Threading.Tasks.Task sendFileAsync(Filehosting.Filehost.DTO file) {
            return base.Channel.sendFileAsync(file);
        }
        
        public Filehosting.Filehost.DTO getFile(string ind, long curByte) {
            return base.Channel.getFile(ind, curByte);
        }
        
        public System.Threading.Tasks.Task<Filehosting.Filehost.DTO> getFileAsync(string ind, long curByte) {
            return base.Channel.getFileAsync(ind, curByte);
        }
        
        public string getFileInd(string fileName) {
            return base.Channel.getFileInd(fileName);
        }
        
        public System.Threading.Tasks.Task<string> getFileIndAsync(string fileName) {
            return base.Channel.getFileIndAsync(fileName);
        }
        
        public long getFileInfo(string fileName) {
            return base.Channel.getFileInfo(fileName);
        }
        
        public System.Threading.Tasks.Task<long> getFileInfoAsync(string fileName) {
            return base.Channel.getFileInfoAsync(fileName);
        }
    }
}
